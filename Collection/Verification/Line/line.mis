Line Interface Specification

Constants
---------
               Line Delimiters

use constant PCHAR_ESC => '_G_';
use constant PCHAR_END => '_H_';
use constant SEPSIZE => 6; # |PCHAR_ESC| + |PCHAR_END|
use constant MAX => 1000;



Assumptions/Notes
-----------------

To frame a packet, pre-pend  PCHAR_ESC and post-pend PCHAR_END to
the packet.  To remove a frame, remove PCHAR_ESC and PCHAR_END from a
framed packet.  PCHAR_ESC and PCAHR_END are only used for framing and
never appear within a valid packet.

See line_tst.pl for examples of method invocation.

Exceptions
----------
               fullbuff    

Class Method new
----------------
Inputs: optional (scalar) maxbuff size
Exceptions: none
Behaviour: create a  line instance with state
               maxbuff # instance scalar variable: max size of inbuff 
                       # and outbuff (default 100)
               inbuff  # instance array variable: FIFO queue 
               outbuff # instance array variable: FIFO queue 
Outputs: returns a reference to a line instance

Instance Method enqueue_packet 
------------------------------
Inputs: (scalar) packet
Exceptions: if |outbuff| + packet size + SEPSIZE  > maxbuff then 
               throw fullbuff
Behaviour: frame the packet and enqueue it on outbuff
Outputs: none

Instance Method dequeue_packet
------------------------------
Inputs: none
Exceptions: none
Behaviour/Outputs: if a framed packet exists in inbuff then
                      dequeue framed packet and remove the frame.
                      if the packet is the heartbeat packet then
                         return undef
                      else 
                         return the packet
                   else
                      return undef
   
Instance Method enqueue_packet_fragment
---------------------------------------
Inputs: (scalar) framed packet fragment
Exceptions: if |inbuff| + |framed packet fragment| > maxbuff then 
               throw fullbuff
Behaviour: enqueue the fragment on inbuff
Outputs: none
   
Instance Method dequeue_packet_fragment
---------------------------------------
Inputs: (scalar) size
Exceptions: none
Behaviour/Outputs: if |outbuff| >= size
                      dequeue a framed packed fragment from outbuff 
                      return fragment where |fragment| == size
                   else if |outbuff| > 0   
                      dequeue a framed packed fragment from outbuff 
                      return fragment where 
                      |fragment| == |outbuff| before dequeue
                   else 
                      return undef

Inbuff Data Flow
----------------
                                                              dequeue a packet
                                                                    ^
                                                                    |
Line                                     ----------                 |
Source --------------------------------> | inbuff | -----------------
                                         ----------
           enqueue a packet fragment


Outbuff Data Flow
----------------

enqueue a packet
       |
       |           -----------
       ----------> | outbuff | -------------------------------------> Line
                   -----------                                        Sink
                                     dequeue a packet fragment
